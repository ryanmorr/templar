/*! @ryanmorr/templar v2.0.0 | https://github.com/ryanmorr/templar */function _typeof2(a){return _typeof2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof2(a)}(function(a,b){"object"===("undefined"==typeof exports?"undefined":_typeof2(exports))&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):(a=a||self,a.index=b())})(this,function(){'use strict';function a(b){return a="function"==typeof Symbol&&"symbol"===_typeof2(Symbol.iterator)?function(a){return _typeof2(a)}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":_typeof2(a)},a(b)}function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function c(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function d(a,b,d){return b&&c(a.prototype,b),d&&c(a,d),a}function e(){for(E=null;0<G.length;)G.shift().render()}function f(c){return new Promise(function(a,b){E||(E=requestAnimationFrame(e)),G.push({render:function(){return a(c())},cancel:b})})}function g(){return Math.random().toString(36).substr(2,9)}function h(a){return I.test(a)}function i(b){return"object"===a(b)&&!0===b.templar}function j(a,b,c){var d;for(a.global&&(a.lastIndex=0);d=a.exec(b);)c(d)}function k(a){return H.innerHTML=a,document.importNode(H.content,!0)}function l(a,b){var c=document.createTextNode(""),d=document.createTextNode("");return c.templarId=d.templarId=b,a.insertBefore(c,a.firstChild),a.appendChild(d),a}function m(a,b){for(var c=[],d=a.firstChild,e=!1;d;)d.templarId!==b||e?d.templarId===b&&e&&(e=!1,c.push(d)):e=!0,e&&c.push(d),d=d.nextSibling;return c}function n(a){return a.reduce(function(a,b){return a.appendChild(q(b))&&a},document.createDocumentFragment())}function o(a){return 11===a.nodeType?Array.from(a.childNodes):a}function p(a,b){Array.isArray(b)?b.forEach(function(b){return a.removeChild(b)}):a.removeChild(b)}function q(a,b){return i(a)?a:null==a?document.createTextNode(""):("number"==typeof a&&(a+=""),"string"==typeof a?!1===b&&h(a)?k(a):document.createTextNode(a):Array.isArray(a)?n(a):a)}function r(a,b,c){i(b)?(b.unmount(),a.insertBefore(b.frag,c),b._setRoot(a)):a.insertBefore(b,c)}function s(a,b,c){i(b)?(b.unmount(),a.replaceChild(b.frag,c),b._setRoot(a)):a.replaceChild(b,c)}function t(a,b,c,d,e){if("number"==typeof c&&(c+=""),3===b.nodeType&&"string"==typeof c&&!h(c))return b.data=c,b;var f=q(c,d),g=o(f);return i(b)?(b.unmount(),r(a,f,e)):Array.isArray(b)?0===b.length?r(a,f,e):1===b.length?s(a,f,b[0]):(p(a,b),r(a,f,e)):s(a,f,b),g}function u(a,b,c,d){if(!("style"===b))b.startsWith("on")&&("function"==typeof c||"function"==typeof d)?(b=b.slice(2).toLowerCase(),null==d?a.removeEventListener(b,c):null==c&&a.addEventListener(b,d)):"form"!==b&&"list"!==b&&b in a?a[b]=null==d?"":d:null==d||!1===d?a.removeAttribute(b):a.setAttribute(b,d);else if("string"==typeof d)a.style.cssText=d;else for(var e in d){var f=null==d||null==d[e]?"":d[e];"-"===e[0]?a.style.setProperty(e,f):a.style[e]=f}}function v(a){return-1!==a.indexOf("{{")}function w(a,b){return a.replace(J,function(a,c){return b[c]}).trim()}function x(a){var b=[];return j(J,a,function(a){return b.push(a[1])}),b}function y(a,b,c){b in a||(a[b]=[]),a[b].push(c)}function z(a,b,c,d){var e=null,g=x(d),h=c.startsWith("on");h&&(b[c]=null,b.removeAttribute(c));var i=function(){var f=e;e=h||d==="{{"+g[0]+"}}"?a.data[g[0]]:w(d,a.data);e===f||(u(b,c,f,e),a.events.emit("attributechange",b,f,e))};return function(){g.every(function(b){return b in a.data})&&(document.contains(b)?f(i):i())}}function A(a,b,c,d,e){var g=null,h=function(){if(g=a.data[d],g!==b){var f=c.parentNode;b=t(f,b,g,e,c),a.events.emit("change",f)}};return function(){d in a.data&&(document.contains(c)?f(h):h())}}function B(a,b,c,d,e){var f=z(a,b,d,e);x(e).forEach(function(a){return y(c,a,f)})}function C(a,b,c){var d=document.createDocumentFragment();return j(K,b.data,function(b){if(null!=b[1]){var e=b[1],f=!1;"&"===e[0]&&(f=!0,e=e.substr(1));var g=document.createTextNode(""),h=document.createTextNode(""),i=A(a,g,h,e,f);y(c,e,i),d.appendChild(g),d.appendChild(h)}else null!=b[2]&&d.appendChild(document.createTextNode(b[2]))}),d}function D(a,b){var c=2<arguments.length&&arguments[2]!==void 0?arguments[2]:{};return Array.from(b).reduce(function(b,c){if(3===c.nodeType)v(c.data)&&c.replaceWith(C(a,c,b));else if(1===c.nodeType){for(var d,e=0,f=c.attributes.length;e<f;e++)d=c.attributes[e],v(d.value)&&B(a,c,b,d.name,d.value);c.hasChildNodes()&&D(a,c.childNodes,b)}return b},c)}var E,F=/*#__PURE__*/function(){function a(){b(this,a),this.events={}}return d(a,[{key:"on",value:function(a,b){var c=this.events[a];void 0===c&&(c=[],this.events[a]=c),c.push(b)}},{key:"remove",value:function(a,b){var c=this.events[a];if(void 0!==c)for(var d=0,e=c.length;d<e;d++)if(c[d]===b)return void c.splice(d,1)}},{key:"emit",value:function(a){for(var b=arguments.length,c=Array(1<b?b-1:0),d=1;d<b;d++)c[d-1]=arguments[d];var e=this.events[a];void 0!==e&&e.length&&e.forEach(function(a){return a.apply(void 0,c)})}}]),a}(),G=[],H=document.createElement("template"),I=/<[a-z][\s\S]*>/,J=/\{\{\s*&?(.+?)\s*\}\}/g,K=/\{\{\s*(.+?)\s*\}\}|((?:(?!(?:\{\{\s*(.+?)\s*\}\})).)+)/g,L=/*#__PURE__*/function(){function a(c,d){b(this,a),this.id=g(),this.templar=!0,this.data={};var e=k(c.trim());this.root=this.frag=l(e,this.id),this.bindings=D(this,e.childNodes),this.events=new F,this.mounted=!1,d&&this.set(d)}return d(a,[{key:"mount",value:function(a){this.isMounted()&&this.unmount(),a.appendChild(this.frag),this._setRoot(a)}},{key:"unmount",value:function(){var a=this;this.isMounted()&&(m(this.getRoot(),this.id).forEach(function(b){a.frag.appendChild(b)}),this.root=this.frag,this.mounted=!1,this.events.emit("unmount"))}},{key:"get",value:function(a){return a in this.data?this.data[a]:null}},{key:"set",value:function(a,b){var c=this;return"string"==typeof a?void(this.data[a]=b,this.bindings[a].forEach(function(a){return a()})):void Object.keys(a).forEach(function(b){return c.set(b,a[b])})}},{key:"on",value:function(a,b){var c=this;return this.events.on(a,b),function(){return c.events.remove(a,b)}}},{key:"query",value:function(a){var b=this.getRoot();if(b===this.frag)return Array.from(b.querySelectorAll(a));var c=m(b,this.id);return Array.from(b.querySelectorAll(a)).filter(function(a){return c.some(function(b){return b===a||!!(1===b.nodeType&&b.contains(a))})})}},{key:"getRoot",value:function(){return this.root}},{key:"isMounted",value:function(){return this.mounted}},{key:"_setRoot",value:function(a){this.root=a,this.mounted=!0,this.events.emit("mount",a)}}]),a}();/*! @ryanmorr/schedule-render v2.0.1 | https://github.com/ryanmorr/schedule-render */return function(a,b){return new L(a,b)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
