/*! @ryanmorr/templar v2.0.0 | https://github.com/ryanmorr/templar */'use strict';function _typeof2(a){return _typeof2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof2(a)}function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"===_typeof2(Symbol.iterator)?function(a){return _typeof2(a)}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":_typeof2(a)},_typeof(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}var frame,EventEmitter=/*#__PURE__*/function(){function a(){_classCallCheck(this,a),this.events={}}return _createClass(a,[{key:"on",value:function(a,b){var c=this.events[a];void 0===c&&(c=[],this.events[a]=c),c.push(b)}},{key:"remove",value:function(a,b){var c=this.events[a];if(void 0!==c)for(var d=0,e=c.length;d<e;d++)if(c[d]===b)return void c.splice(d,1)}},{key:"emit",value:function(a){for(var b=arguments.length,c=Array(1<b?b-1:0),d=1;d<b;d++)c[d-1]=arguments[d];var e=this.events[a];void 0!==e&&e.length&&e.forEach(function(a){return a.apply(void 0,c)})}}]),a}(),budget=null,batch=[];/*! @ryanmorr/schedule-render v2.0.1 | https://github.com/ryanmorr/schedule-render */function render(){if(frame=null,null==budget)for(;0<batch.length;)batch.shift().render()}function scheduleRender(c){return new Promise(function(a,b){frame||(frame=requestAnimationFrame(render)),batch.push({render:function(){return a(c())},cancel:b})})}var template=document.createElement("template"),htmlRe=/<[a-z][\s\S]*>/;function uid(){return Math.random().toString(36).substr(2,9)}function isHTML(a){return htmlRe.test(a)}function isTemplate(a){return"object"===_typeof(a)&&!0===a.templar}function getMatches(a,b,c){var d;for(a.global&&(a.lastIndex=0);d=a.exec(b);)c(d)}function parseHTML(a){return template.innerHTML=a,document.importNode(template.content,!0)}function wrapFragment(a,b){var c=document.createTextNode(""),d=document.createTextNode("");return c.templarId=d.templarId=b,a.insertBefore(c,a.firstChild),a.appendChild(d),a}function getTemplateNodes(a,b){for(var c=[],d=a.firstChild,e=!1;d;)d.templarId!==b||e?d.templarId===b&&e&&(e=!1,c.push(d)):e=!0,e&&c.push(d),d=d.nextSibling;return c}function arrayToFrag(a){return a.reduce(function(a,b){return a.appendChild(getNode(b))&&a},document.createDocumentFragment())}function resolveNode(a){return 11===a.nodeType?Array.from(a.childNodes):a}function clear(a,b){Array.isArray(b)?b.forEach(function(b){return a.removeChild(b)}):a.removeChild(b)}function getNode(a,b){return isTemplate(a)?a:null==a?document.createTextNode(""):("number"==typeof a&&(a+=""),"string"==typeof a?!1===b&&isHTML(a)?parseHTML(a):document.createTextNode(a):Array.isArray(a)?arrayToFrag(a):a)}function insertBefore(a,b,c){isTemplate(b)?(b.unmount(),a.insertBefore(b.frag,c),b._setRoot(a)):a.insertBefore(b,c)}function replace(a,b,c){isTemplate(b)?(b.unmount(),a.replaceChild(b.frag,c),b._setRoot(a)):a.replaceChild(b,c)}function patchNode(a,b,c,d,e){if("number"==typeof c&&(c+=""),3===b.nodeType&&"string"==typeof c&&!isHTML(c))return b.data=c,b;var f=getNode(c,d),g=resolveNode(f);return isTemplate(b)?(b.unmount(),insertBefore(a,f,e)):Array.isArray(b)?0===b.length?insertBefore(a,f,e):1===b.length?replace(a,f,b[0]):(clear(a,b),insertBefore(a,f,e)):replace(a,f,b),g}function patchAttribute(a,b,c,d){if(!("style"===b))b.startsWith("on")&&("function"==typeof c||"function"==typeof d)?(b=b.slice(2).toLowerCase(),null==d?a.removeEventListener(b,c):null==c&&a.addEventListener(b,d)):"form"!==b&&"list"!==b&&b in a?a[b]=null==d?"":d:null==d||!1===d?a.removeAttribute(b):a.setAttribute(b,d);else if("string"==typeof d)a.style.cssText=d;else for(var e in d){var f=null==d||null==d[e]?"":d[e];"-"===e[0]?a.style.setProperty(e,f):a.style[e]=f}}var matcherRe=/\{\{\s*&?(.+?)\s*\}\}/g,nodeContentRe=/\{\{\s*(.+?)\s*\}\}|((?:(?!(?:\{\{\s*(.+?)\s*\}\})).)+)/g;function hasInterpolation(a){return-1!==a.indexOf("{{")}function interpolate(a,b){return a.replace(matcherRe,function(a,c){return b[c]}).trim()}function getTokens(a){var b=[];return getMatches(matcherRe,a,function(a){return b.push(a[1])}),b}function addBinding(a,b,c){b in a||(a[b]=[]),a[b].push(c)}function attributeBinding(a,b,c,d){var e=null,f=getTokens(d),g=c.startsWith("on");g&&(b[c]=null,b.removeAttribute(c));var h=function(){var h=e;e=g||d==="{{"+f[0]+"}}"?a.data[f[0]]:interpolate(d,a.data);e===h||(patchAttribute(b,c,h,e),a.events.emit("attributechange",b,h,e))};return function(){f.every(function(b){return b in a.data})&&(document.contains(b)?scheduleRender(h):h())}}function nodeBinding(a,b,c,d,e){var f=null,g=function(){if(f=a.data[d],f!==b){var g=c.parentNode;b=patchNode(g,b,f,e,c),a.events.emit("change",g)}};return function(){d in a.data&&(document.contains(c)?scheduleRender(g):g())}}function parseAttribute(a,b,c,d,e){var f=attributeBinding(a,b,d,e);getTokens(e).forEach(function(a){return addBinding(c,a,f)})}function parseNode(a,b,c){var d=document.createDocumentFragment();return getMatches(nodeContentRe,b.data,function(b){if(null!=b[1]){var e=b[1],f=!1;"&"===e[0]&&(f=!0,e=e.substr(1));var g=document.createTextNode(""),h=document.createTextNode(""),i=nodeBinding(a,g,h,e,f);addBinding(c,e,i),d.appendChild(g),d.appendChild(h)}else null!=b[2]&&d.appendChild(document.createTextNode(b[2]))}),d}function parseTemplate(a,b){var c=2<arguments.length&&arguments[2]!==void 0?arguments[2]:{};return Array.from(b).reduce(function(b,c){if(3===c.nodeType)hasInterpolation(c.data)&&c.replaceWith(parseNode(a,c,b));else if(1===c.nodeType){for(var d,e=0,f=c.attributes.length;e<f;e++)d=c.attributes[e],hasInterpolation(d.value)&&parseAttribute(a,c,b,d.name,d.value);c.hasChildNodes()&&parseTemplate(a,c.childNodes,b)}return b},c)}var Templar=/*#__PURE__*/function(){function a(b,c){_classCallCheck(this,a),this.id=uid(),this.templar=!0,this.data={};var d=parseHTML(b.trim());this.root=this.frag=wrapFragment(d,this.id),this.bindings=parseTemplate(this,d.childNodes),this.events=new EventEmitter,this.mounted=!1,c&&this.set(c)}return _createClass(a,[{key:"mount",value:function(a){this.isMounted()&&this.unmount(),a.appendChild(this.frag),this._setRoot(a)}},{key:"unmount",value:function(){var a=this;this.isMounted()&&(getTemplateNodes(this.getRoot(),this.id).forEach(function(b){a.frag.appendChild(b)}),this.root=this.frag,this.mounted=!1,this.events.emit("unmount"))}},{key:"get",value:function(a){return a in this.data?this.data[a]:null}},{key:"set",value:function(a,b){var c=this;return"string"==typeof a?void(this.data[a]=b,this.bindings[a].forEach(function(a){return a()})):void Object.keys(a).forEach(function(b){return c.set(b,a[b])})}},{key:"on",value:function(a,b){var c=this;return this.events.on(a,b),function(){return c.events.remove(a,b)}}},{key:"query",value:function(a){var b=this.getRoot();if(b===this.frag)return Array.from(b.querySelectorAll(a));var c=getTemplateNodes(b,this.id);return Array.from(b.querySelectorAll(a)).filter(function(a){return c.some(function(b){return b===a||!!(1===b.nodeType&&b.contains(a))})})}},{key:"getRoot",value:function(){return this.root}},{key:"isMounted",value:function(){return this.mounted}},{key:"_setRoot",value:function(a){this.root=a,this.mounted=!0,this.events.emit("mount",a)}}]),a}();function templar(a,b){return new Templar(a,b)}module.exports=templar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
