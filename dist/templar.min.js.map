{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","templar.js","src/attr-binding.js","src/binding.js","src/index.js","src/node-binding.js","src/parser.js","src/templar.js","src/util.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","templar","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","descriptor","key","protoProps","staticProps","_get","get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","parent","getPrototypeOf","getter","_binding","_binding2","_parser","_util","AttrBinding","_Binding","tpl","node","attr","text","_this","interpolate","data","trim","removeAttribute","setAttribute","./binding","./parser","./util","2","Binding","tokens","every","token","renderer","render","bind","updateDOM","3","_templar2","_templar","./templar","4","NodeBinding","nodes","forEach","unmount","parentNode","removeChild","getParent","index","getNodeIndex","children","childNodes","purge","frag","interpolateDOM","root","nodeType","push","apply","insertBefore","appendChild","5","hasInterpolation","str","indexOf","addBindings","bindings","binding","getMatches","matcherRe","matches","extractTokens","setTokens","simpleIdentifierRe","test","compileExpression","expr","exprCache","body","vars","map","join","replace","expressionsRe","match","identifierRe","reduce","rootRe","getTokenValue","all","fn","document","createDocumentFragment","nodeContentRe","_escape","substr","_typeof","isHTML","parseHTML","createTextNode","escapeHTML","mount","nodeName","parseTemplate","arguments","hashmap","toArray","_nodeBinding2","attributes","_attrBinding2","name","hasChildNodes","Symbol","iterator","_nodeBinding","_attrBinding","./attr-binding","./node-binding","6","Templar","id","uid","wrapFragment","mounted","destroyed","set","isDestroyed","isMounted","getTemplateNodes","getRoot","_this2","keys","method","isRendered","shouldUpdate","selector","querySelector","querySelectorAll","contains","7","Array","from","slice","re","lastIndex","exec","el","compareDocumentPosition","escapeHTMLRe","c","escapeHTMLMap","htmlRe","html","supportsTemplate","template","createElement","innerHTML","importNode","content","div","firstChild","frame","cancelAnimationFrame","batch","requestAnimationFrame","shift","Math","floor","counter","random","toString","substring","nextSibling","first","last","elements","isTpl","className","style","cssText","tag","tagName","toLowerCase","<",">","&","\"","'"],"mappings":"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","file":"templar.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*! templar v0.1.1 | https://github.com/ryanmorr/templar */\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.templar = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _binding = require('./binding');\n\nvar _binding2 = _interopRequireDefault(_binding);\n\nvar _parser = require('./parser');\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Import dependencies\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\r\n * Bind a token to a DOM node attribute\r\n *\r\n * @class AttrBinding\r\n * @extends Binding\r\n * @api private\r\n */\nvar AttrBinding = function (_Binding) {\n    _inherits(AttrBinding, _Binding);\n\n    /**\r\n     * Instantiate the class\r\n     *\r\n     * @constructor\r\n     * @param {Templar} tpl\r\n     * @param {Node} node\r\n     * @param {String} attr\r\n     * @param {String} text\r\n     * @api private\r\n     */\n    function AttrBinding(tpl, node, attr, text) {\n        _classCallCheck(this, AttrBinding);\n\n        var _this = _possibleConstructorReturn(this, (AttrBinding.__proto__ || Object.getPrototypeOf(AttrBinding)).call(this, tpl, text));\n\n        _this.node = node;\n        _this.attr = attr;\n        return _this;\n    }\n\n    /**\r\n     * Update the attribute of the node,\r\n     * if empty then remove the attribute\r\n     *\r\n     * @api private\r\n     */\n\n\n    _createClass(AttrBinding, [{\n        key: 'render',\n        value: function render() {\n            _get(AttrBinding.prototype.__proto__ || Object.getPrototypeOf(AttrBinding.prototype), 'render', this).call(this);\n            var value = (0, _parser.interpolate)(this.text, this.tpl.data).trim();\n            if (value === '') {\n                this.node.removeAttribute(this.attr);\n                return;\n            }\n            (0, _util.setAttribute)(this.node, this.attr, value);\n        }\n    }]);\n\n    return AttrBinding;\n}(_binding2.default);\n\nexports.default = AttrBinding;\nmodule.exports = exports['default'];\n\n},{\"./binding\":2,\"./parser\":5,\"./util\":7}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Import dependencies\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\n\nvar _util = require('./util');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Abstract class that binds a token\r\n * to a DOM node\r\n *\r\n * @class Binding\r\n * @api private\r\n */\nvar Binding = function () {\n\n    /**\r\n     * Instantiate the class\r\n     *\r\n     * @constructor\r\n     * @param {Templar} tpl\r\n     * @param {String} text\r\n     * @api private\r\n     */\n    function Binding(tpl, text) {\n        _classCallCheck(this, Binding);\n\n        this.tpl = tpl;\n        this.text = text;\n    }\n\n    /**\r\n     * Add the tokens that this binding\r\n     * makes use of\r\n     *\r\n     * @param {Array} tokens\r\n     * @api private\r\n     */\n\n\n    _createClass(Binding, [{\n        key: 'setTokens',\n        value: function setTokens(tokens) {\n            this.tokens = tokens;\n        }\n\n        /**\r\n         * Ensure all the tokens are defined\r\n         * before rendering any changes\r\n         *\r\n         * @return {Boolean}\r\n         * @api private\r\n         */\n\n    }, {\n        key: 'shouldUpdate',\n        value: function shouldUpdate() {\n            var _this = this;\n\n            return this.tokens.every(function (token) {\n                return token in _this.tpl.data;\n            });\n        }\n\n        /**\r\n         * Schedule a frame to update the\r\n         * DOM node\r\n         *\r\n         * @api private\r\n         */\n\n    }, {\n        key: 'update',\n        value: function update() {\n            if (!this.renderer) {\n                this.renderer = this.render.bind(this);\n                (0, _util.updateDOM)(this.renderer);\n            }\n        }\n\n        /**\r\n         * Clear `renderer` to allow\r\n         * updates\r\n         *\r\n         * @api private\r\n         */\n\n    }, {\n        key: 'render',\n        value: function render() {\n            this.renderer = null;\n        }\n    }]);\n\n    return Binding;\n}();\n\nexports.default = Binding;\nmodule.exports = exports['default'];\n\n},{\"./util\":7}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = templar;\n\nvar _templar = require('./templar');\n\nvar _templar2 = _interopRequireDefault(_templar);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Factory function for creating\r\n * `Templar` instances\r\n *\r\n * @param {String} tpl\r\n * @param {Object} data (optional)\r\n * @return {Templar}\r\n * @api public\r\n */\nfunction templar(tpl, data) {\n  return new _templar2.default(tpl, data);\n} /**\r\n   * Import dependencies\r\n   */\nmodule.exports = exports['default'];\n\n},{\"./templar\":6}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _templar = require('./templar');\n\nvar _templar2 = _interopRequireDefault(_templar);\n\nvar _binding = require('./binding');\n\nvar _binding2 = _interopRequireDefault(_binding);\n\nvar _parser = require('./parser');\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Import dependencies\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\r\n * Bind a token to a DOM node\r\n *\r\n * @class NodeBinding\r\n * @extends Binding\r\n * @api private\r\n */\nvar NodeBinding = function (_Binding) {\n    _inherits(NodeBinding, _Binding);\n\n    /**\r\n     * Instantiate the class\r\n     *\r\n     * @constructor\r\n     * @param {Templar} tpl\r\n     * @param {Node} node\r\n     * @api private\r\n     */\n    function NodeBinding(tpl, node) {\n        _classCallCheck(this, NodeBinding);\n\n        var _this = _possibleConstructorReturn(this, (NodeBinding.__proto__ || Object.getPrototypeOf(NodeBinding)).call(this, tpl, node.data));\n\n        _this.nodes = [node];\n        return _this;\n    }\n\n    /**\r\n     * Remove all the current nodes occupying\r\n     * the token placeholders\r\n     *\r\n     * @api private\r\n     */\n\n\n    _createClass(NodeBinding, [{\n        key: 'purge',\n        value: function purge() {\n            this.nodes.forEach(function (node) {\n                if (node instanceof _templar2.default) {\n                    node.unmount();\n                    return;\n                }\n                var parent = node.parentNode;\n                if (parent) {\n                    parent.removeChild(node);\n                }\n            });\n        }\n\n        /**\r\n         * Replace the token placeholders with the\r\n         * current values in the `Templar` instance\r\n         *\r\n         * @api private\r\n         */\n\n    }, {\n        key: 'render',\n        value: function render() {\n            _get(NodeBinding.prototype.__proto__ || Object.getPrototypeOf(NodeBinding.prototype), 'render', this).call(this);\n            var nodes = [];\n            var node = this.nodes[0];\n            var parent = (0, _util.getParent)(node);\n            var index = (0, _util.getNodeIndex)(parent, node);\n            var children = parent.childNodes;\n            this.purge();\n            var frag = (0, _parser.interpolateDOM)(this.text, this.tpl.data, function (value) {\n                if (value instanceof _templar2.default) {\n                    value.root = parent;\n                }\n                value.nodeType === 11 ? nodes.push.apply(nodes, value.childNodes) : nodes.push(value);\n            });\n            this.nodes = nodes;\n            index in children ? parent.insertBefore(frag, children[index]) : parent.appendChild(frag);\n        }\n    }]);\n\n    return NodeBinding;\n}(_binding2.default);\n\nexports.default = NodeBinding;\nmodule.exports = exports['default'];\n\n},{\"./binding\":2,\"./parser\":5,\"./templar\":6,\"./util\":7}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }; /**\r\n                                                                                                                                                                                                                                                   * Import dependencies\r\n                                                                                                                                                                                                                                                   */\n\n\nexports.interpolate = interpolate;\nexports.interpolateDOM = interpolateDOM;\nexports.parseTemplate = parseTemplate;\n\nvar _templar = require('./templar');\n\nvar _templar2 = _interopRequireDefault(_templar);\n\nvar _nodeBinding = require('./node-binding');\n\nvar _nodeBinding2 = _interopRequireDefault(_nodeBinding);\n\nvar _attrBinding = require('./attr-binding');\n\nvar _attrBinding2 = _interopRequireDefault(_attrBinding);\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Common variables\r\n */\nvar matcherRe = /\\{\\{\\s*\\&?(.+?)\\s*\\}\\}/g;\nvar nodeContentRe = /\\{\\{\\s*(.+?)\\s*\\}\\}|((?:(?!(?:\\{\\{\\s*(.+?)\\s*\\}\\})).)+)/g;\nvar simpleIdentifierRe = /^\\&?[A-Za-z0-9_]+$/;\nvar expressionsRe = /\"[^\"]*\"|'[^']*'|\\/([^/]+)\\/|true|false/g;\nvar identifierRe = /[a-zA-Z_]\\w*([.][a-zA-Z_]\\w*)*/g;\nvar rootRe = /^([^.]+)/;\nvar exprCache = (0, _util.hashmap)();\n\n/**\r\n * Check if a string has interpolation\r\n *\r\n * @param {String} str\r\n * @return {Boolean}\r\n * @api private\r\n */\nfunction hasInterpolation(str) {\n    return str.indexOf('{{') !== -1;\n}\n\n/**\r\n * Map tokens to a `Binding` instance\r\n *\r\n * @param {Object} bindings\r\n * @param {String} text\r\n * @param {Binding} binding\r\n * @api private\r\n */\nfunction addBindings(bindings, text, binding) {\n    (0, _util.getMatches)(matcherRe, text, function (matches) {\n        var str = matches[1];\n        var tokens = extractTokens(str);\n        binding.setTokens(tokens);\n        if (!simpleIdentifierRe.test(str)) {\n            compileExpression(str, tokens);\n        }\n        tokens.forEach(function (token) {\n            if (!(token in bindings)) {\n                bindings[token] = [];\n            }\n            bindings[token].push(binding);\n        });\n    });\n}\n\n/**\r\n * Convert a string expression into\r\n * a function\r\n *\r\n * @param {String} expr\r\n * @param {Array} tokens\r\n * @api private\r\n */\nfunction compileExpression(expr, tokens) {\n    if (!(expr in exprCache)) {\n        var body = 'return ' + expr + ';';\n        if (tokens.length) {\n            var vars = tokens.map(function (value) {\n                return value + ' = this[\\'' + value + '\\']';\n            });\n            body = 'var ' + vars.join(',') + '; ' + body;\n        }\n        // eslint-disable-next-line no-new-func\n        exprCache[expr] = new Function(body);\n    }\n}\n\n/**\r\n * Extract the tokens from an expression\r\n * string\r\n *\r\n * @param {String} expr\r\n * @return {Array}\r\n * @api private\r\n */\nfunction extractTokens(expr) {\n    return (expr.replace(expressionsRe, '').match(identifierRe) || []).reduce(function (tokens, token) {\n        token = token.match(rootRe)[1];\n        if (tokens.indexOf(token) === -1) {\n            tokens.push(token);\n        }\n        return tokens;\n    }, []);\n}\n\n/**\r\n * Get the value of a token\r\n *\r\n * @param {String} token\r\n * @param {Object} data\r\n * @return {String|Number|Boolean|Node|Templar}\r\n * @api private\r\n */\nfunction getTokenValue(token, data) {\n    return token in exprCache ? exprCache[token].call(data) : data[token];\n}\n\n/**\r\n * Supplant the tokens of a string with\r\n * the corresponding value in an object\r\n * literal\r\n *\r\n * @param {String} tpl\r\n * @param {Object} data\r\n * @return {String}\r\n * @api private\r\n */\nfunction interpolate(tpl, data) {\n    return tpl.replace(matcherRe, function (all, token) {\n        return getTokenValue(token, data);\n    });\n}\n\n/**\r\n * Build a document fragment that supplants\r\n * the tokens of a string with the\r\n * corresponding value in an object literal\r\n *\r\n * @param {String} tpl\r\n * @param {Object} data\r\n * @param {Function} fn\r\n * @return {DocumentFragment}\r\n * @api private\r\n */\nfunction interpolateDOM(tpl, data, fn) {\n    var frag = document.createDocumentFragment();\n    (0, _util.getMatches)(nodeContentRe, tpl, function (matches) {\n        var value = void 0;\n        if (matches[1] != null) {\n            var token = matches[1],\n                _escape = false;\n            if (token[0] === '&') {\n                _escape = true;\n                token = token.substr(1);\n            }\n            value = getTokenValue(token, data);\n            switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n                case 'string':\n                    if (!_escape && (0, _util.isHTML)(value)) {\n                        value = (0, _util.parseHTML)(value);\n                        break;\n                    }\n                // falls through\n                case 'number':\n                case 'boolean':\n                    value = document.createTextNode((0, _util.escapeHTML)(value));\n                    break;\n                default:\n                    if (value instanceof _templar2.default) {\n                        value.mount(frag);\n                    }\n            }\n        } else if (matches[2] != null) {\n            value = document.createTextNode(matches[2]);\n        }\n        if (value != null) {\n            fn(value);\n            if (value.nodeName) {\n                frag.appendChild(value);\n            }\n        }\n    });\n    return frag;\n}\n\n/**\r\n * Parses the nodes of a template to\r\n * create a key/value object that maps\r\n * the template tokens to a `Binding`\r\n * instance capable of supplanting the\r\n * value in the DOM\r\n *\r\n * @param {Templar} tpl\r\n * @param {NodeList} nodes\r\n * @param {String} id\r\n * @param {Object} bindings\r\n * @return {Object}\r\n * @api private\r\n */\nfunction parseTemplate(tpl, nodes) {\n    var bindings = arguments.length <= 2 || arguments[2] === undefined ? (0, _util.hashmap)() : arguments[2];\n\n    return (0, _util.toArray)(nodes).reduce(function (bindings, node) {\n        if (node.nodeType === 3) {\n            if (hasInterpolation(node.data)) {\n                var binding = new _nodeBinding2.default(tpl, node);\n                addBindings(bindings, node.data, binding);\n            }\n        } else if (node.nodeType === 1) {\n            for (var i = 0, length = node.attributes.length, attr; i < length; i++) {\n                attr = node.attributes[i];\n                if (hasInterpolation(attr.value)) {\n                    var _binding = new _attrBinding2.default(tpl, node, attr.name, attr.value);\n                    addBindings(bindings, attr.value, _binding);\n                }\n            }\n            if (node.hasChildNodes()) {\n                parseTemplate(tpl, node.childNodes, bindings);\n            }\n        }\n        return bindings;\n    }, bindings);\n}\n\n},{\"./attr-binding\":1,\"./node-binding\":4,\"./templar\":6,\"./util\":7}],6:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\nmport dependencies\r\nn\n\nvar _parser = require('./parser');\n\nvar _util = require('./util');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * DOM templating class\r\n *\r\n * @class Templar\r\n * @api public\r\n */\nvar Templar = function () {\n\n    /**\r\n     * Instantiate the class providing the\r\n     * template string\r\n     *\r\n     * @constructor\r\n     * @param {String} tpl\r\n     * @param {Object} data (optional)\r\n     * @api public\r\n     */\n    function Templar(tpl, data) {\n        _classCallCheck(this, Templar);\n\n        this.id = (0, _util.uid)();\n        var frag = (0, _util.parseHTML)(tpl);\n        this.root = this.frag = (0, _util.wrapFragment)(frag, this.id);\n        this.bindings = (0, _parser.parseTemplate)(this, frag.childNodes);\n        this.data = (0, _util.hashmap)();\n        this.mounted = false;\n        this.destroyed = false;\n        if (data) {\n            this.set(data);\n        }\n    }\n\n    /**\r\n     * Unmount the template and nullify\r\n     * the properties\r\n     *\r\n     * @api public\r\n     */\n\n\n    _createClass(Templar, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (!this.isDestroyed()) {\n                if (this.isMounted()) {\n                    this.unmount();\n                }\n                this.root = this.frag = this.data = this.bindings = null;\n                this.destroyed = true;\n            }\n        }\n\n        /**\r\n         * Append the template to a parent\r\n         * element\r\n         *\r\n         * @param {Element} root\r\n         * @return {Templar}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'mount',\n        value: function mount(root) {\n            if (this.isMounted()) {\n                this.unmount();\n            }\n            root.appendChild(this.frag);\n            this.root = root;\n            this.mounted = true;\n            return this;\n        }\n\n        /**\r\n         * Remove the template from it's\r\n         * parent element\r\n         *\r\n         * @return {Templar}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'unmount',\n        value: function unmount() {\n            var _this = this;\n\n            if (this.isMounted()) {\n                (0, _util.getTemplateNodes)(this.getRoot(), this.id).forEach(function (node) {\n                    _this.frag.appendChild(node);\n                });\n                this.root = this.frag;\n                this.mounted = false;\n            }\n            return this;\n        }\n\n        /**\r\n         * Get the value for a token in\r\n         * the template\r\n         *\r\n         * @param {String} token\r\n         * @return {String|Number|Boolean|Node|Templar|Function}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'get',\n        value: function get(token) {\n            return token in this.data ? this.data[token] : null;\n        }\n\n        /**\r\n         * Set the value for a token in\r\n         * the template\r\n         *\r\n         * @param {String|Object} token\r\n         * @param {String|Number|Boolean|Node|Templar|Function} value\r\n         * @return {Templar}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'set',\n        value: function set(token, value) {\n            var _this2 = this;\n\n            if (typeof token !== 'string') {\n                Object.keys(token).forEach(function (name) {\n                    return _this2.set(name, token[name]);\n                });\n                return;\n            }\n            if (value != null) {\n                this.data[token] = value;\n                if (token in this.bindings) {\n                    (function () {\n                        var method = _this2.isRendered() ? 'update' : 'render';\n                        _this2.bindings[token].forEach(function (binding) {\n                            if (binding.shouldUpdate()) {\n                                binding[method]();\n                            }\n                        });\n                    })();\n                }\n            }\n            return this;\n        }\n\n        /**\r\n         * Query the template for a single\r\n         * element matching the provided\r\n         * selector string\r\n         *\r\n         * @param {String} selector\r\n         * @return {Element|Null}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'find',\n        value: function find(selector) {\n            return this.getRoot().querySelector(selector);\n        }\n\n        /**\r\n         * Query the template for all the\r\n         * elements matching the provided\r\n         * selector string\r\n         *\r\n         * @param {String} selector\r\n         * @return {Array}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'query',\n        value: function query(selector) {\n            return (0, _util.toArray)(this.getRoot().querySelectorAll(selector));\n        }\n\n        /**\r\n         * Get the root element of the\r\n         * template\r\n         *\r\n         * @return {Element}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'getRoot',\n        value: function getRoot() {\n            return this.root;\n        }\n\n        /**\r\n         * Is the template mounted to\r\n         * a parent element?\r\n         *\r\n         * @return {Boolean}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'isMounted',\n        value: function isMounted() {\n            return this.mounted;\n        }\n\n        /**\r\n         * Is the template rendered within\r\n         * the DOM?\r\n         *\r\n         * @return {Boolean}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'isRendered',\n        value: function isRendered() {\n            return this.isMounted() && (0, _util.contains)(document, this.getRoot());\n        }\n\n        /**\r\n         * Has the template been destroyed?\r\n         *\r\n         * @return {Boolean}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'isDestroyed',\n        value: function isDestroyed() {\n            return this.destroyed;\n        }\n    }]);\n\n    return Templar;\n}();\n\nexports.default = Templar;\nmodule.exports = exports['default'];\n\n},{\"./parser\":5,\"./util\":7}],7:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.hashmap = hashmap;\nexports.toArray = toArray;\nexports.getMatches = getMatches;\nexports.contains = contains;\nexports.escapeHTML = escapeHTML;\nexports.isHTML = isHTML;\nexports.parseHTML = parseHTML;\nexports.updateDOM = updateDOM;\nexports.uid = uid;\nexports.getNodeIndex = getNodeIndex;\nexports.getParent = getParent;\nexports.wrapFragment = wrapFragment;\nexports.getTemplateNodes = getTemplateNodes;\nexports.setAttribute = setAttribute;\n\nvar _templar = require('./templar');\n\nvar _templar2 = _interopRequireDefault(_templar);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * Common variables\r\n */\nvar frame = void 0; /**\r\n                     * Import dependencies\r\n                     */\n\nvar counter = 1;\nvar batch = [];\nvar slice = [].slice;\nvar indexOf = [].indexOf;\nvar htmlRe = /<[a-z][\\s\\S]*>/;\nvar escapeHTMLRe = /[<>&\"']/g;\nvar escapeHTMLMap = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\"': '&#39;',\n    '\\'': '&quot;'\n};\n\n/**\r\n * Check if the browser supports the <template> element\r\n */\nvar supportsTemplate = 'content' in document.createElement('template');\n\n/**\r\n * Get a 'bare' object for basic\r\n * key/value hash maps\r\n *\r\n * @return {Object}\r\n * @api private\r\n */\nfunction hashmap() {\n    return Object.create(null);\n}\n\n/**\r\n * Convert an array-like object to\r\n * an array\r\n *\r\n * @param {ArrayLike} obj\r\n * @return {Array}\r\n * @api private\r\n */\nfunction toArray(obj) {\n    if ('from' in Array) {\n        return Array.from(obj);\n    }\n    return slice.call(obj);\n}\n\n/**\r\n * Iterates through all the matches\r\n * of the provided regex and string\r\n *\r\n * @param {RegExp} re\r\n * @param {String} str\r\n * @param {Function} fn\r\n * @api private\r\n */\nfunction getMatches(re, str, fn) {\n    var matches = void 0;\n    if (re.global) {\n        re.lastIndex = 0;\n    }\n    while (matches = re.exec(str)) {\n        fn(matches);\n    }\n}\n\n/**\r\n * Does the provided root element contain\r\n * the provided node\r\n *\r\n * @param {Element} root\r\n * @param {Element} el\r\n * @return {Boolean}\r\n * @api private\r\n */\nfunction contains(root, el) {\n    if ('contains' in root) {\n        return root.contains(el);\n    }\n    return !!(root.compareDocumentPosition(el) & 16);\n}\n\n/**\r\n * Escape HTML characters\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n * @api private\r\n */\nfunction escapeHTML(str) {\n    if (str == null) {\n        return '';\n    }\n    if (typeof str === 'string') {\n        return str.replace(escapeHTMLRe, function (c) {\n            return escapeHTMLMap[c] || '';\n        });\n    }\n    return str;\n}\n\n/**\r\n * Is the provided string an HTML\r\n * string?\r\n *\r\n * @param {String} str\r\n * @return {Boolean}\r\n * @api private\r\n */\nfunction isHTML(str) {\n    return htmlRe.test(str);\n}\n\n/**\r\n * Convert an HTML string into a\r\n * document fragment\r\n *\r\n * @param {String} html\r\n * @return {DocumentFragment}\r\n * @api private\r\n */\nfunction parseHTML(html) {\n    if (supportsTemplate) {\n        var template = document.createElement('template');\n        template.innerHTML = html;\n        return document.importNode(template.content, true);\n    }\n    var frag = document.createDocumentFragment();\n    var div = document.createElement('div');\n    div.innerHTML = html;\n    while (div.firstChild) {\n        frag.appendChild(div.firstChild);\n    }\n    return frag;\n}\n\n/**\r\n * Use `requestAnimationFrame` to\r\n * batch DOM updates to boost\r\n * performance\r\n *\r\n * @param {Function} fn\r\n * @api private\r\n */\nfunction updateDOM(fn) {\n    if (frame) {\n        cancelAnimationFrame(frame);\n    }\n    batch.push(fn);\n    frame = requestAnimationFrame(function () {\n        frame = null;\n        var render = void 0;\n        while (render = batch.shift()) {\n            render();\n        }\n    });\n}\n\n/**\r\n * Generate a unique id\r\n *\r\n * @return {String}\r\n * @api private\r\n */\nfunction uid() {\n    return Math.floor((counter++ + Math.random()) * 0x10000).toString(16).substring(1);\n}\n\n/**\r\n * Get the index of a node or template\r\n * amongst its sibling nodes\r\n *\r\n * @param {Node} parent\r\n * @param {Node|Templar} node\r\n * @return {Number}\r\n * @api private\r\n */\nfunction getNodeIndex(parent, node) {\n    if (node instanceof _templar2.default) {\n        var index = 0;\n        var tpl = node;\n        node = parent.firstChild;\n        while (node) {\n            if (node.templar === tpl.id) {\n                return index;\n            }\n            node = node.nextSibling;\n            index++;\n        }\n        return 0;\n    }\n    return indexOf.call(parent.childNodes, node);\n}\n\n/**\r\n * Get the parent element of a node or\r\n * template\r\n *\r\n * @param {Node|Templar} node\r\n * @return {Element}\r\n * @api private\r\n */\nfunction getParent(node) {\n    if (node instanceof _templar2.default) {\n        return node.getRoot();\n    }\n    return node.parentNode;\n}\n\n/**\r\n * Wrap a document fragment in empty text\r\n * nodes so that the beginning and end of a\r\n * template is easily identifiable in the DOM\r\n *\r\n * @param {DocumentFragment} frag\r\n * @param {String} id\r\n * @return {DocumentFragment}\r\n * @api private\r\n */\nfunction wrapFragment(frag, id) {\n    var first = document.createTextNode('');\n    var last = document.createTextNode('');\n    first.templar = last.templar = id;\n    frag.insertBefore(first, frag.firstChild);\n    frag.appendChild(last);\n    return frag;\n}\n\n/**\r\n * Find the template elements within the\r\n * provided root element that match the\r\n * provided template ID\r\n *\r\n * @param {Element} root\r\n * @param {String} id\r\n * @return {Array}\r\n * @api private\r\n */\nfunction getTemplateNodes(root, id) {\n    var elements = [];\n    var node = root.firstChild,\n        isTpl = false;\n    while (node) {\n        if (node.templar === id && !isTpl) {\n            isTpl = true;\n        } else if (node.templar === id && isTpl) {\n            isTpl = false;\n            elements.push(node);\n        }\n        if (isTpl) {\n            elements.push(node);\n        }\n        node = node.nextSibling;\n    }\n    return elements;\n}\n\n/**\r\n * Set the attribute/property of a DOM\r\n * node\r\n *\r\n * @param {Element} node\r\n * @param {String} attr\r\n * @param {String} value\r\n * @api private\r\n */\nfunction setAttribute(node, attr, value) {\n    if (value === 'true') {\n        value = true;\n    } else if (value === 'false') {\n        value = false;\n    }\n    switch (attr) {\n        case 'class':\n            node.className = value;\n            break;\n        case 'style':\n            node.style.cssText = value;\n            break;\n        case 'value':\n            var tag = node.tagName.toLowerCase();\n            if (tag === 'input' || tag === 'textarea') {\n                node.value = value;\n                break;\n            }\n        // falls through\n        default:\n            if (attr in node) {\n                node[attr] = value;\n                return;\n            }\n            node.setAttribute(attr, value);\n    }\n}\n\n},{\"./templar\":6}]},{},[3])(3)\n});\n\n","/**\r\n * Import dependencies\r\n */\r\nimport Binding from './binding';\r\nimport { interpolate } from './parser';\r\nimport { setAttribute } from './util';\r\n\r\n/**\r\n * Bind a token to a DOM node attribute\r\n *\r\n * @class AttrBinding\r\n * @extends Binding\r\n * @api private\r\n */\r\nexport default class AttrBinding extends Binding {\r\n\r\n    /**\r\n     * Instantiate the class\r\n     *\r\n     * @constructor\r\n     * @param {Templar} tpl\r\n     * @param {Node} node\r\n     * @param {String} attr\r\n     * @param {String} text\r\n     * @api private\r\n     */\r\n    constructor(tpl, node, attr, text) {\r\n        super(tpl, text);\r\n        this.node = node;\r\n        this.attr = attr;\r\n    }\r\n\r\n    /**\r\n     * Update the attribute of the node,\r\n     * if empty then remove the attribute\r\n     *\r\n     * @api private\r\n     */\r\n    render() {\r\n        super.render();\r\n        const value = interpolate(this.text, this.tpl.data).trim();\r\n        if (value === '') {\r\n            this.node.removeAttribute(this.attr);\r\n            return;\r\n        }\r\n        setAttribute(this.node, this.attr, value);\r\n    }\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport { updateDOM } from './util';\r\n\r\n/**\r\n * Abstract class that binds a token\r\n * to a DOM node\r\n *\r\n * @class Binding\r\n * @api private\r\n */\r\nexport default class Binding {\r\n\r\n    /**\r\n     * Instantiate the class\r\n     *\r\n     * @constructor\r\n     * @param {Templar} tpl\r\n     * @param {String} text\r\n     * @api private\r\n     */\r\n    constructor(tpl, text) {\r\n        this.tpl = tpl;\r\n        this.text = text;\r\n    }\r\n\r\n    /**\r\n     * Add the tokens that this binding\r\n     * makes use of\r\n     *\r\n     * @param {Array} tokens\r\n     * @api private\r\n     */\r\n    setTokens(tokens) {\r\n        this.tokens = tokens;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ensure all the tokens are defined\r\n     * before rendering any changes\r\n     *\r\n     * @return {Boolean}\r\n     * @api private\r\n     */\r\n    shouldUpdate() {\r\n        return this.tokens.every((token) => token in this.tpl.data);\r\n    }\r\n\r\n    /**\r\n     * Schedule a frame to update the\r\n     * DOM node\r\n     *\r\n     * @api private\r\n     */\r\n    update() {\r\n        if (!this.renderer) {\r\n            this.renderer = this.render.bind(this);\r\n            updateDOM(this.renderer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear `renderer` to allow\r\n     * updates\r\n     *\r\n     * @api private\r\n     */\r\n    render() {\r\n        this.renderer = null;\r\n    }\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport Templar from './templar';\r\n\r\n/**\r\n * Factory function for creating\r\n * `Templar` instances\r\n *\r\n * @param {String} tpl\r\n * @param {Object} data (optional)\r\n * @return {Templar}\r\n * @api public\r\n */\r\nexport default function templar(tpl, data) {\r\n    return new Templar(tpl, data);\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport Templar from './templar';\r\nimport Binding from './binding';\r\nimport { interpolateDOM } from './parser';\r\nimport { getNodeIndex, getParent } from './util';\r\n\r\n/**\r\n * Bind a token to a DOM node\r\n *\r\n * @class NodeBinding\r\n * @extends Binding\r\n * @api private\r\n */\r\nexport default class NodeBinding extends Binding {\r\n\r\n    /**\r\n     * Instantiate the class\r\n     *\r\n     * @constructor\r\n     * @param {Templar} tpl\r\n     * @param {Node} node\r\n     * @api private\r\n     */\r\n    constructor(tpl, node) {\r\n        super(tpl, node.data);\r\n        this.nodes = [node];\r\n    }\r\n\r\n    /**\r\n     * Remove all the current nodes occupying\r\n     * the token placeholders\r\n     *\r\n     * @api private\r\n     */\r\n    purge() {\r\n        this.nodes.forEach((node) => {\r\n            if (node instanceof Templar) {\r\n                node.unmount();\r\n                return;\r\n            }\r\n            const parent = node.parentNode;\r\n            if (parent) {\r\n                parent.removeChild(node);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Replace the token placeholders with the\r\n     * current values in the `Templar` instance\r\n     *\r\n     * @api private\r\n     */\r\n    render() {\r\n        super.render();\r\n        const nodes = [];\r\n        const node = this.nodes[0];\r\n        const parent = getParent(node);\r\n        const index = getNodeIndex(parent, node);\r\n        const children = parent.childNodes;\r\n        this.purge();\r\n        const frag = interpolateDOM(this.text, this.tpl.data, (value) => {\r\n            if (value instanceof Templar) {\r\n                value.root = parent;\r\n            }\r\n            value.nodeType === 11 ? nodes.push.apply(nodes, value.childNodes) : nodes.push(value);\r\n        });\r\n        this.nodes = nodes;\r\n        index in children ? parent.insertBefore(frag, children[index]) : parent.appendChild(frag);\r\n    }\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport Templar from './templar';\r\nimport NodeBinding from './node-binding';\r\nimport AttrBinding from './attr-binding';\r\nimport { hashmap, toArray, getMatches, escapeHTML, parseHTML, isHTML } from './util';\r\n\r\n/**\r\n * Common variables\r\n */\r\nconst matcherRe = /\\{\\{\\s*\\&?(.+?)\\s*\\}\\}/g;\r\nconst nodeContentRe = /\\{\\{\\s*(.+?)\\s*\\}\\}|((?:(?!(?:\\{\\{\\s*(.+?)\\s*\\}\\})).)+)/g;\r\nconst simpleIdentifierRe = /^\\&?[A-Za-z0-9_]+$/;\r\nconst expressionsRe = /\"[^\"]*\"|'[^']*'|\\/([^/]+)\\/|true|false/g;\r\nconst identifierRe = /[a-zA-Z_]\\w*([.][a-zA-Z_]\\w*)*/g;\r\nconst rootRe = /^([^.]+)/;\r\nconst exprCache = hashmap();\r\n\r\n/**\r\n * Check if a string has interpolation\r\n *\r\n * @param {String} str\r\n * @return {Boolean}\r\n * @api private\r\n */\r\nfunction hasInterpolation(str) {\r\n    return str.indexOf('{{') !== -1;\r\n}\r\n\r\n/**\r\n * Map tokens to a `Binding` instance\r\n *\r\n * @param {Object} bindings\r\n * @param {String} text\r\n * @param {Binding} binding\r\n * @api private\r\n */\r\nfunction addBindings(bindings, text, binding) {\r\n    getMatches(matcherRe, text, (matches) => {\r\n        const str = matches[1];\r\n        const tokens = extractTokens(str);\r\n        binding.setTokens(tokens);\r\n        if (!simpleIdentifierRe.test(str)) {\r\n            compileExpression(str, tokens);\r\n        }\r\n        tokens.forEach((token) => {\r\n            if (!(token in bindings)) {\r\n                bindings[token] = [];\r\n            }\r\n            bindings[token].push(binding);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Convert a string expression into\r\n * a function\r\n *\r\n * @param {String} expr\r\n * @param {Array} tokens\r\n * @api private\r\n */\r\nfunction compileExpression(expr, tokens) {\r\n    if (!(expr in exprCache)) {\r\n        let body = `return ${expr};`;\r\n        if (tokens.length) {\r\n            const vars = tokens.map((value) => `${value} = this['${value}']`);\r\n            body = `var ${vars.join(',')}; ${body}`;\r\n        }\r\n        // eslint-disable-next-line no-new-func\r\n        exprCache[expr] = new Function(body);\r\n    }\r\n}\r\n\r\n/**\r\n * Extract the tokens from an expression\r\n * string\r\n *\r\n * @param {String} expr\r\n * @return {Array}\r\n * @api private\r\n */\r\nfunction extractTokens(expr) {\r\n    return (expr.replace(expressionsRe, '').match(identifierRe) || []).reduce((tokens, token) => {\r\n        token = token.match(rootRe)[1];\r\n        if (tokens.indexOf(token) === -1) {\r\n            tokens.push(token);\r\n        }\r\n        return tokens;\r\n    }, []);\r\n}\r\n\r\n/**\r\n * Get the value of a token\r\n *\r\n * @param {String} token\r\n * @param {Object} data\r\n * @return {String|Number|Boolean|Node|Templar}\r\n * @api private\r\n */\r\nfunction getTokenValue(token, data) {\r\n    return (token in exprCache) ? exprCache[token].call(data) : data[token];\r\n}\r\n\r\n/**\r\n * Supplant the tokens of a string with\r\n * the corresponding value in an object\r\n * literal\r\n *\r\n * @param {String} tpl\r\n * @param {Object} data\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function interpolate(tpl, data) {\r\n    return tpl.replace(matcherRe, (all, token) => getTokenValue(token, data));\r\n}\r\n\r\n/**\r\n * Build a document fragment that supplants\r\n * the tokens of a string with the\r\n * corresponding value in an object literal\r\n *\r\n * @param {String} tpl\r\n * @param {Object} data\r\n * @param {Function} fn\r\n * @return {DocumentFragment}\r\n * @api private\r\n */\r\nexport function interpolateDOM(tpl, data, fn) {\r\n    const frag = document.createDocumentFragment();\r\n    getMatches(nodeContentRe, tpl, (matches) => {\r\n        let value;\r\n        if (matches[1] != null) {\r\n            let token = matches[1], escape = false;\r\n            if (token[0] === '&') {\r\n                escape = true;\r\n                token = token.substr(1);\r\n            }\r\n            value = getTokenValue(token, data);\r\n            switch (typeof value) {\r\n                case 'string':\r\n                    if (!escape && isHTML(value)) {\r\n                        value = parseHTML(value);\r\n                        break;\r\n                    }\r\n                    // falls through\r\n                case 'number':\r\n                case 'boolean':\r\n                    value = document.createTextNode(escapeHTML(value));\r\n                    break;\r\n                default:\r\n                    if (value instanceof Templar) {\r\n                        value.mount(frag);\r\n                    }\r\n            }\r\n        } else if (matches[2] != null) {\r\n            value = document.createTextNode(matches[2]);\r\n        }\r\n        if (value != null) {\r\n            fn(value);\r\n            if (value.nodeName) {\r\n                frag.appendChild(value);\r\n            }\r\n        }\r\n    });\r\n    return frag;\r\n}\r\n\r\n/**\r\n * Parses the nodes of a template to\r\n * create a key/value object that maps\r\n * the template tokens to a `Binding`\r\n * instance capable of supplanting the\r\n * value in the DOM\r\n *\r\n * @param {Templar} tpl\r\n * @param {NodeList} nodes\r\n * @param {String} id\r\n * @param {Object} bindings\r\n * @return {Object}\r\n * @api private\r\n */\r\nexport function parseTemplate(tpl, nodes, bindings = hashmap()) {\r\n    return toArray(nodes).reduce((bindings, node) => {\r\n        if (node.nodeType === 3) {\r\n            if (hasInterpolation(node.data)) {\r\n                const binding = new NodeBinding(tpl, node);\r\n                addBindings(bindings, node.data, binding);\r\n            }\r\n        } else if (node.nodeType === 1) {\r\n            for (let i = 0, length = node.attributes.length, attr; i < length; i++) {\r\n                attr = node.attributes[i];\r\n                if (hasInterpolation(attr.value)) {\r\n                    const binding = new AttrBinding(tpl, node, attr.name, attr.value);\r\n                    addBindings(bindings, attr.value, binding);\r\n                }\r\n            }\r\n            if (node.hasChildNodes()) {\r\n                parseTemplate(tpl, node.childNodes, bindings);\r\n            }\r\n        }\r\n        return bindings;\r\n    }, bindings);\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport { parseTemplate } from './parser';\r\nimport { hashmap, toArray, contains, parseHTML, uid, wrapFragment, getTemplateNodes } from './util';\r\n\r\n/**\r\n * DOM templating class\r\n *\r\n * @class Templar\r\n * @api public\r\n */\r\nexport default class Templar {\r\n\r\n    /**\r\n     * Instantiate the class providing the\r\n     * template string\r\n     *\r\n     * @constructor\r\n     * @param {String} tpl\r\n     * @param {Object} data (optional)\r\n     * @api public\r\n     */\r\n    constructor(tpl, data) {\r\n        this.id = uid();\r\n        const frag = parseHTML(tpl);\r\n        this.root = this.frag = wrapFragment(frag, this.id);\r\n        this.bindings = parseTemplate(this, frag.childNodes);\r\n        this.data = hashmap();\r\n        this.mounted = false;\r\n        this.destroyed = false;\r\n        if (data) {\r\n            this.set(data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unmount the template and nullify\r\n     * the properties\r\n     *\r\n     * @api public\r\n     */\r\n    destroy() {\r\n        if (!this.isDestroyed()) {\r\n            if (this.isMounted()) {\r\n                this.unmount();\r\n            }\r\n            this.root = this.frag = this.data = this.bindings = null;\r\n            this.destroyed = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Append the template to a parent\r\n     * element\r\n     *\r\n     * @param {Element} root\r\n     * @return {Templar}\r\n     * @api public\r\n     */\r\n    mount(root) {\r\n        if (this.isMounted()) {\r\n            this.unmount();\r\n        }\r\n        root.appendChild(this.frag);\r\n        this.root = root;\r\n        this.mounted = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove the template from it's\r\n     * parent element\r\n     *\r\n     * @return {Templar}\r\n     * @api public\r\n     */\r\n    unmount() {\r\n        if (this.isMounted()) {\r\n            getTemplateNodes(this.getRoot(), this.id).forEach((node) => {\r\n                this.frag.appendChild(node);\r\n            });\r\n            this.root = this.frag;\r\n            this.mounted = false;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get the value for a token in\r\n     * the template\r\n     *\r\n     * @param {String} token\r\n     * @return {String|Number|Boolean|Node|Templar|Function}\r\n     * @api public\r\n     */\r\n    get(token) {\r\n        return token in this.data ? this.data[token] : null;\r\n    }\r\n\r\n    /**\r\n     * Set the value for a token in\r\n     * the template\r\n     *\r\n     * @param {String|Object} token\r\n     * @param {String|Number|Boolean|Node|Templar|Function} value\r\n     * @return {Templar}\r\n     * @api public\r\n     */\r\n    set(token, value) {\r\n        if (typeof token !== 'string') {\r\n            Object.keys(token).forEach((name) => this.set(name, token[name]));\r\n            return;\r\n        }\r\n        if (value != null) {\r\n            this.data[token] = value;\r\n            if (token in this.bindings) {\r\n                const method = this.isRendered() ? 'update' : 'render';\r\n                this.bindings[token].forEach((binding) => {\r\n                    if (binding.shouldUpdate()) {\r\n                        binding[method]();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Query the template for a single\r\n     * element matching the provided\r\n     * selector string\r\n     *\r\n     * @param {String} selector\r\n     * @return {Element|Null}\r\n     * @api public\r\n     */\r\n    find(selector) {\r\n        return this.getRoot().querySelector(selector);\r\n    }\r\n\r\n    /**\r\n     * Query the template for all the\r\n     * elements matching the provided\r\n     * selector string\r\n     *\r\n     * @param {String} selector\r\n     * @return {Array}\r\n     * @api public\r\n     */\r\n    query(selector) {\r\n        return toArray(this.getRoot().querySelectorAll(selector));\r\n    }\r\n\r\n    /**\r\n     * Get the root element of the\r\n     * template\r\n     *\r\n     * @return {Element}\r\n     * @api public\r\n     */\r\n    getRoot() {\r\n        return this.root;\r\n    }\r\n\r\n    /**\r\n     * Is the template mounted to\r\n     * a parent element?\r\n     *\r\n     * @return {Boolean}\r\n     * @api public\r\n     */\r\n    isMounted() {\r\n        return this.mounted;\r\n    }\r\n\r\n    /**\r\n     * Is the template rendered within\r\n     * the DOM?\r\n     *\r\n     * @return {Boolean}\r\n     * @api public\r\n     */\r\n    isRendered() {\r\n        return this.isMounted() && contains(document, this.getRoot());\r\n    }\r\n\r\n    /**\r\n     * Has the template been destroyed?\r\n     *\r\n     * @return {Boolean}\r\n     * @api public\r\n     */\r\n    isDestroyed() {\r\n        return this.destroyed;\r\n    }\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport Templar from './templar';\r\n\r\n/**\r\n * Common variables\r\n */\r\nlet frame;\r\nlet counter = 1;\r\nconst batch = [];\r\nconst slice = [].slice;\r\nconst indexOf = [].indexOf;\r\nconst htmlRe = /<[a-z][\\s\\S]*>/;\r\nconst escapeHTMLRe = /[<>&\"']/g;\r\nconst escapeHTMLMap = {\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '&': '&amp;',\r\n    '\"': '&#39;',\r\n    '\\'': '&quot;'\r\n};\r\n\r\n/**\r\n * Check if the browser supports the <template> element\r\n */\r\nconst supportsTemplate = 'content' in document.createElement('template');\r\n\r\n/**\r\n * Get a 'bare' object for basic\r\n * key/value hash maps\r\n *\r\n * @return {Object}\r\n * @api private\r\n */\r\nexport function hashmap() {\r\n    return Object.create(null);\r\n}\r\n\r\n/**\r\n * Convert an array-like object to\r\n * an array\r\n *\r\n * @param {ArrayLike} obj\r\n * @return {Array}\r\n * @api private\r\n */\r\nexport function toArray(obj) {\r\n    if ('from' in Array) {\r\n        return Array.from(obj);\r\n    }\r\n    return slice.call(obj);\r\n}\r\n\r\n/**\r\n * Iterates through all the matches\r\n * of the provided regex and string\r\n *\r\n * @param {RegExp} re\r\n * @param {String} str\r\n * @param {Function} fn\r\n * @api private\r\n */\r\nexport function getMatches(re, str, fn) {\r\n    let matches;\r\n    if (re.global) {\r\n        re.lastIndex = 0;\r\n    }\r\n    while ((matches = re.exec(str))) {\r\n        fn(matches);\r\n    }\r\n}\r\n\r\n/**\r\n * Does the provided root element contain\r\n * the provided node\r\n *\r\n * @param {Element} root\r\n * @param {Element} el\r\n * @return {Boolean}\r\n * @api private\r\n */\r\nexport function contains(root, el) {\r\n    if ('contains' in root) {\r\n        return root.contains(el);\r\n    }\r\n    return !!(root.compareDocumentPosition(el) & 16);\r\n}\r\n\r\n/**\r\n * Escape HTML characters\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function escapeHTML(str) {\r\n    if (str == null) {\r\n        return '';\r\n    }\r\n    if (typeof str === 'string') {\r\n        return str.replace(escapeHTMLRe, (c) => escapeHTMLMap[c] || '');\r\n    }\r\n    return str;\r\n}\r\n\r\n/**\r\n * Is the provided string an HTML\r\n * string?\r\n *\r\n * @param {String} str\r\n * @return {Boolean}\r\n * @api private\r\n */\r\nexport function isHTML(str) {\r\n    return htmlRe.test(str);\r\n}\r\n\r\n/**\r\n * Convert an HTML string into a\r\n * document fragment\r\n *\r\n * @param {String} html\r\n * @return {DocumentFragment}\r\n * @api private\r\n */\r\nexport function parseHTML(html) {\r\n    if (supportsTemplate) {\r\n        const template = document.createElement('template');\r\n        template.innerHTML = html;\r\n        return document.importNode(template.content, true);\r\n    }\r\n    const frag = document.createDocumentFragment();\r\n    const div = document.createElement('div');\r\n    div.innerHTML = html;\r\n    while (div.firstChild) {\r\n        frag.appendChild(div.firstChild);\r\n    }\r\n    return frag;\r\n}\r\n\r\n/**\r\n * Use `requestAnimationFrame` to\r\n * batch DOM updates to boost\r\n * performance\r\n *\r\n * @param {Function} fn\r\n * @api private\r\n */\r\nexport function updateDOM(fn) {\r\n    if (frame) {\r\n        cancelAnimationFrame(frame);\r\n    }\r\n    batch.push(fn);\r\n    frame = requestAnimationFrame(() => {\r\n        frame = null;\r\n        let render;\r\n        while ((render = batch.shift())) {\r\n            render();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Generate a unique id\r\n *\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function uid() {\r\n    return Math.floor((counter++ + Math.random()) * 0x10000).toString(16).substring(1);\r\n}\r\n\r\n/**\r\n * Get the index of a node or template\r\n * amongst its sibling nodes\r\n *\r\n * @param {Node} parent\r\n * @param {Node|Templar} node\r\n * @return {Number}\r\n * @api private\r\n */\r\nexport function getNodeIndex(parent, node) {\r\n    if (node instanceof Templar) {\r\n        let index = 0;\r\n        const tpl = node;\r\n        node = parent.firstChild;\r\n        while (node) {\r\n            if (node.templar === tpl.id) {\r\n                return index;\r\n            }\r\n            node = node.nextSibling;\r\n            index++;\r\n        }\r\n        return 0;\r\n    }\r\n    return indexOf.call(parent.childNodes, node);\r\n}\r\n\r\n/**\r\n * Get the parent element of a node or\r\n * template\r\n *\r\n * @param {Node|Templar} node\r\n * @return {Element}\r\n * @api private\r\n */\r\nexport function getParent(node) {\r\n    if (node instanceof Templar) {\r\n        return node.getRoot();\r\n    }\r\n    return node.parentNode;\r\n}\r\n\r\n/**\r\n * Wrap a document fragment in empty text\r\n * nodes so that the beginning and end of a\r\n * template is easily identifiable in the DOM\r\n *\r\n * @param {DocumentFragment} frag\r\n * @param {String} id\r\n * @return {DocumentFragment}\r\n * @api private\r\n */\r\nexport function wrapFragment(frag, id) {\r\n    const first = document.createTextNode('');\r\n    const last = document.createTextNode('');\r\n    first.templar = last.templar = id;\r\n    frag.insertBefore(first, frag.firstChild);\r\n    frag.appendChild(last);\r\n    return frag;\r\n}\r\n\r\n/**\r\n * Find the template elements within the\r\n * provided root element that match the\r\n * provided template ID\r\n *\r\n * @param {Element} root\r\n * @param {String} id\r\n * @return {Array}\r\n * @api private\r\n */\r\nexport function getTemplateNodes(root, id) {\r\n    const elements = [];\r\n    let node = root.firstChild, isTpl = false;\r\n    while (node) {\r\n        if (node.templar === id && !isTpl) {\r\n            isTpl = true;\r\n        } else if (node.templar === id && isTpl) {\r\n            isTpl = false;\r\n            elements.push(node);\r\n        }\r\n        if (isTpl) {\r\n            elements.push(node);\r\n        }\r\n        node = node.nextSibling;\r\n    }\r\n    return elements;\r\n}\r\n\r\n/**\r\n * Set the attribute/property of a DOM\r\n * node\r\n *\r\n * @param {Element} node\r\n * @param {String} attr\r\n * @param {String} value\r\n * @api private\r\n */\r\nexport function setAttribute(node, attr, value) {\r\n    if (value === 'true') {\r\n        value = true;\r\n    } else if (value === 'false') {\r\n        value = false;\r\n    }\r\n    switch (attr) {\r\n        case 'class':\r\n            node.className = value;\r\n            break;\r\n        case 'style':\r\n            node.style.cssText = value;\r\n            break;\r\n        case 'value':\r\n            const tag = node.tagName.toLowerCase();\r\n            if (tag === 'input' || tag === 'textarea') {\r\n                node.value = value;\r\n                break;\r\n            }\r\n            // falls through\r\n        default:\r\n            if (attr in node) {\r\n                node[attr] = value;\r\n                return;\r\n            }\r\n            node.setAttribute(attr, value);\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}